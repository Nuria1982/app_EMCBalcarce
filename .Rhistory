cat("No hay nuevos datos para agregar\n")
}
} else {
# Si la tabla no existe, crearla y luego añadir los datos
tryCatch({
dbWriteTable(con, "datos_siga", datos_siga, append = FALSE, row.names = FALSE)
cat("Tabla creada y datos almacenados correctamente\n")
}, error = function(e) {
cat("Error al crear la tabla o guardar los datos:", e$message, "\n")
})
}
} else {
cat("Las columnas de los datos no coinciden con las esperadas\n")
}
}
}
# Ejecutar la actualización de los datos
datos_siga <- obtener_datos_api()
guardar_datos_db(datos_siga, con)
datos <- dbReadTable(con, "datos_siga")
datos
datos_siga
# Ejecutar la actualización de los datos
datos_siga <- obtener_datos_api()
guardar_datos_db(datos_siga, con)
write.csv(datos_siga, "datos_siga.csv", row.names = FALSE)
dbGetQuery(con, "SELECT * FROM datos_siga LIMIT 10")
datos_siga
guardar_datos_db(datos_siga, con)
dbGetQuery(con, "SELECT * FROM datos_siga LIMIT 10")
dbGetQuery(con, "SELECT * FROM datos_siga LIMIT 100")
dbGetQuery(con, "SELECT * FROM datos_siga LIMIT 500")
guardar_datos_db(datos_siga, con)
datos <- dbReadTable(con, "datos_siga")
datos
# Ejecutar la actualización de los datos
datos_siga <- obtener_datos_api()
datos_siga
write.csv(datos_siga, "datos_siga.csv", row.names = FALSE)
balcarce_EMC <- read_excel("balcarce_EMC.xlsx",
col_types = c("date", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"text", "numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
Head(balcarce_EMC)
balcarce_EMC
datos_siga
api_url <- "https://siga.inta.gob.ar/CdnaUV0iiERRpFQE.php?param_type=diario&param_value=32/23-01-2025/23-01-2025"
# Realizar la consulta HTTP a la API
response <- GET(api_url)
contenido <- content(response, as = "text")
# Validar si el contenido es JSON
if (jsonlite::validate(contenido)) {
datos_siga <- tryCatch({
fromJSON(contenido, flatten = TRUE)
}, error = function(e) {
cat("Error al parsear el JSON:", e$message, "\n")
NULL
})
return(datos_siga)
} else {
cat("La API no devolvió un JSON válido\n")
return(NULL)
}
con <- dbConnect(SQLite(), "datos_diarios.sqlite")
# Función para obtener los datos desde la API
obtener_datos_api <- function() {
api_url <- "https://siga.inta.gob.ar/CdnaUV0iiERRpFQE.php?param_type=diario&param_value=32/23-01-2025/23-01-2025"
# fecha_inicio <- format(Sys.Date() - 2, "%d-%m-%Y")
# fecha_fin <- format(Sys.Date() - 2, "%d-%m-%Y")
# fecha_inicio <- "01-01-2020"
# fecha_fin <- "31-12-2020"
# Construir la URL con las fechas dinámicas
# api_url <- paste0("https://siga.inta.gob.ar/CdnaUV0iiERRpFQE.php?param_type=diario&param_value=32/",
# fecha_inicio, "/", fecha_fin)
# Realizar la consulta HTTP a la API
response <- GET(api_url)
contenido <- content(response, as = "text")
# Validar si el contenido es JSON
if (jsonlite::validate(contenido)) {
datos_siga <- tryCatch({
fromJSON(contenido, flatten = TRUE)
}, error = function(e) {
cat("Error al parsear el JSON:", e$message, "\n")
NULL
})
return(datos_siga)
} else {
cat("La API no devolvió un JSON válido\n")
return(NULL)
}
}
# Función para almacenar los datos en la base de datos
guardar_datos_db <- function(datos_siga, con) {
if (!is.null(datos_siga)) {
# Renombrar las columnas para que coincidan con la base de datos
expected_cols <- c(
"HMedia", "HMedia81420", "dirViento1000", "evapotransPotencial", "fechaHora",
"granizo", "heliofaniaEfectiva", "heliofaniaRelativa", "id", "idEstacion",
"nieve", "precDiaPlub", "radiacionGlobal", "radiacionNeta", "rocioMedio",
"tempAbrigo150", "tempAbrigo150Max", "tempAbrigo150Min", "tesionVaporMedia",
"velViento1000Media"
)
if (all(expected_cols %in% colnames(datos_siga))) {
# Seleccionar solo las columnas esperadas
datos_siga <- datos_siga[, expected_cols, drop = FALSE]
# Verificar si la tabla ya existe
if (dbExistsTable(con, "datos_siga")) {
# Verificar si los datos ya están en la base de datos (evitar duplicados)
existing_dates <- dbGetQuery(con, "SELECT DISTINCT fechaHora FROM datos_siga")
new_dates <- datos_siga$fechaHora
# Filtrar los datos nuevos que no estén en la base de datos
datos_nuevos <- datos_siga[!new_dates %in% existing_dates$fechaHora, ]
if (nrow(datos_nuevos) > 0) {
# Si hay nuevos datos, agregarlos
tryCatch({
dbWriteTable(con, "datos_siga", datos_nuevos, append = TRUE, row.names = FALSE)
cat("Datos almacenados correctamente\n")
}, error = function(e) {
cat("Error al guardar los datos en la base de datos:", e$message, "\n")
})
} else {
cat("No hay nuevos datos para agregar\n")
}
} else {
# Si la tabla no existe, crearla y luego añadir los datos
tryCatch({
dbWriteTable(con, "datos_siga", datos_siga, append = FALSE, row.names = FALSE)
cat("Tabla creada y datos almacenados correctamente\n")
}, error = function(e) {
cat("Error al crear la tabla o guardar los datos:", e$message, "\n")
})
}
} else {
cat("Las columnas de los datos no coinciden con las esperadas\n")
}
}
}
# Ejecutar la actualización de los datos
datos_siga <- obtener_datos_api()
datos_siga
datos_actuales <- datos_EMC[!is.na(datos_EMC$Precipitacion_Pluviometrica) &
!is.na(datos_EMC$Temperatura_Abrigo_150cm_Maxima) &
!is.na(datos_EMC$Temperatura_Abrigo_150cm_Minima), ]
ultima_fecha <- max(datos_actuales$Fecha)
ultimos_datos <- datos_actuales[datos_actuales$Fecha == ultima_fecha, ]
datos_siga <- datos_siga %>%
mutate(Fecha = as.Date(substr(fechaHora, 1, 10)))
datos_siga_clean <- datos_siga %>%
select(
Fecha,
Temperatura_Abrigo_150cm = tempAbrigo150,
Temperatura_Abrigo_150cm_Maxima = tempAbrigo150Max,
Temperatura_Abrigo_150cm_Minima = tempAbrigo150Min,
Evapotranspiracion_Potencial = evapotransPotencial,
Precipitacion_Pluviometrica = precDiaPlub
)
datos_EMC <- balcarce_EMC
datos_EMC <- datos_EMC %>%
filter(Año >= 1970)
# datos_EMC <- subset(datos, select = -c(Direccion_Viento_200cm, Direccion_Viento_1000cm))
datos_EMC$Fecha <- as.Date(datos_EMC$Fecha, format = "%Y-%m-%d")
datos_EMC <- datos_EMC[order(datos_EMC$Fecha, decreasing = TRUE), ]
datos_EMC <- datos_EMC %>%
rows_update(datos_siga_clean, by = "Fecha") %>% # Actualiza filas existentes
rows_insert(datos_siga_clean, by = "Fecha")
datos_siga_clean
datos_EMC
datos_EMC <- datos_EMC %>%
rows_insert(datos_siga_clean, by = "Fecha")
datos_EMC
datos_siga_clean
datos_EMC <- datos_EMC %>%
rows_insert(datos_siga_clean, by = "Fecha")
datos_EMC <- datos_EMC %>%
rows_insert(datos_siga_clean, by = "Fecha")
datos_EMC <- datos_EMC[order(datos_EMC$Fecha, creasing = TRUE), ]
datos_EMC <- datos_EMC[order(datos_EMC$Fecha, increasing = TRUE), ]
runApp()
rsconnect::forgetDeployment(appPath = "I:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo")
datos_siga <- datos_siga %>%
mutate(Fecha = as.Date(substr(fechaHora, 1, 10)))
library(rsconnect)
library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(shinycssloaders)
library(DT)
library(tidyr)
library(ggplot2)
library(plotly)
library(dplyr)
library(bslib)
library(shinythemes)
library(bs4Dash)
library(lubridate)
library(png)
library(readxl)
library(writexl)
library(leaflet)
library(webshot)
library(httr)
library(jsonlite)
# library(DBI)
# library(RSQLite)
# library(digest)
con <- dbConnect(SQLite(), "datos_diarios.sqlite")
#
# # Función para obtener los datos desde la API
obtener_datos_api <- function() {
api_url <- "https://siga.inta.gob.ar/CdnaUV0iiERRpFQE.php?param_type=diario&param_value=32/23-01-2025/23-01-2025"
#   # fecha_inicio <- format(Sys.Date() - 2, "%d-%m-%Y")
#   # fecha_fin <- format(Sys.Date() - 2, "%d-%m-%Y")
#   # Construir la URL con las fechas dinámicas
#   # api_url <- paste0("https://siga.inta.gob.ar/CdnaUV0iiERRpFQE.php?param_type=diario&param_value=32/",
#   # fecha_inicio, "/", fecha_fin)
#
#   # Realizar la consulta HTTP a la API
response <- GET(api_url)
contenido <- content(response, as = "text")
# Validar si el contenido es JSON
if (jsonlite::validate(contenido)) {
datos_siga <- tryCatch({
fromJSON(contenido, flatten = TRUE)
}, error = function(e) {
cat("Error al parsear el JSON:", e$message, "\n")
NULL
})
return(datos_siga)
} else {
cat("La API no devolvió un JSON válido\n")
return(NULL)
}
}
# # Función para almacenar los datos en la base de datos
guardar_datos_db <- function(datos_siga, con) {
if (!is.null(datos_siga)) {
# Renombrar las columnas para que coincidan con la base de datos
expected_cols <- c(
"HMedia", "HMedia81420", "dirViento1000", "evapotransPotencial", "fechaHora",
"granizo", "heliofaniaEfectiva", "heliofaniaRelativa", "id", "idEstacion",
"nieve", "precDiaPlub", "radiacionGlobal", "radiacionNeta", "rocioMedio",
"tempAbrigo150", "tempAbrigo150Max", "tempAbrigo150Min", "tesionVaporMedia",
"velViento1000Media"
)
if (all(expected_cols %in% colnames(datos_siga))) {
# Seleccionar solo las columnas esperadas
datos_siga <- datos_siga[, expected_cols, drop = FALSE]
# Verificar si la tabla ya existe
if (dbExistsTable(con, "datos_siga")) {
# Verificar si los datos ya están en la base de datos (evitar duplicados)
existing_dates <- dbGetQuery(con, "SELECT DISTINCT fechaHora FROM datos_siga")
new_dates <- datos_siga$fechaHora
# Filtrar los datos nuevos que no estén en la base de datos
datos_nuevos <- datos_siga[!new_dates %in% existing_dates$fechaHora, ]
if (nrow(datos_nuevos) > 0) {
# Si hay nuevos datos, agregarlos
tryCatch({
dbWriteTable(con, "datos_siga", datos_nuevos, append = TRUE, row.names = FALSE)
cat("Datos almacenados correctamente\n")
}, error = function(e) {
cat("Error al guardar los datos en la base de datos:", e$message, "\n")
})
} else {
cat("No hay nuevos datos para agregar\n")
}
} else {
# Si la tabla no existe, crearla y luego añadir los datos
tryCatch({
dbWriteTable(con, "datos_siga", datos_siga, append = FALSE, row.names = FALSE)
cat("Tabla creada y datos almacenados correctamente\n")
}, error = function(e) {
cat("Error al crear la tabla o guardar los datos:", e$message, "\n")
})
}
} else {
cat("Las columnas de los datos no coinciden con las esperadas\n")
}
}
}
# Ejecutar la actualización de los datos
datos_siga <- obtener_datos_api()
# # guardar_datos_db(datos_siga, con)
# #
# # datos <- dbReadTable(con, "datos_siga")
#
# write.csv(datos_siga, "datos_siga.csv", row.names = FALSE)
#
# # Cerrar la conexión a la base de datos
dbDisconnect(con)
datos_siga <- datos_siga %>%
mutate(Fecha = as.Date(substr(fechaHora, 1, 10)))
datos_siga_clean <- datos_siga %>%
select(
Fecha,
Temperatura_Abrigo_150cm = tempAbrigo150,
Temperatura_Abrigo_150cm_Maxima = tempAbrigo150Max,
Temperatura_Abrigo_150cm_Minima = tempAbrigo150Min,
Evapotranspiracion_Potencial = evapotransPotencial,
Precipitacion_Pluviometrica = precDiaPlub,
Humedad_Media = HMedia,
Humedad_Media_8_14_20 = HMedia81420,
Rocio_Medio = rocioMedio,
Velocidad_viento_1000cm_Media = velViento1000Media,
Radiacion_global = radiacionGlobal,
Radiacion_Neta = radiacionNeta,
)
datos_siga
datos_siga_clean <- datos_siga %>%
select(
Fecha,
Temperatura_Abrigo_150cm = tempAbrigo150,
Temperatura_Abrigo_150cm_Maxima = tempAbrigo150Max,
Temperatura_Abrigo_150cm_Minima = tempAbrigo150Min,
Evapotranspiracion_Potencial = evapotransPotencial,
Precipitacion_Pluviometrica = precDiaPlub,
Humedad_Media_8_14_20 = HMedia81420,
Rocio_Medio = rocioMedio,
Velocidad_viento_1000cm_Media = velViento1000Media,
Radiacion_global = radiacionGlobal,
Radiacion_Neta = radiacionNeta,
)
datos_siga_clean
balcarce_EMC <- read_excel("balcarce_EMC.xlsx",
col_types = c("date", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"text", "numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
datos_EMC <- balcarce_EMC
datos_EMC <- datos_EMC %>%
filter(Año >= 1970)
# datos_EMC <- subset(datos, select = -c(Direccion_Viento_200cm, Direccion_Viento_1000cm))
datos_EMC$Fecha <- as.Date(datos_EMC$Fecha, format = "%Y-%m-%d")
datos_EMC <- datos_EMC[order(datos_EMC$Fecha, decreasing = TRUE), ]
datos_EMC <- datos_EMC %>%
rows_insert(datos_siga_clean, by = "Fecha")
datos_EMC
datos_siga_clean <- datos_siga %>%
select(
Fecha,
Temperatura_Abrigo_150cm = tempAbrigo150,
Temperatura_Abrigo_150cm_Maxima = tempAbrigo150Max,
Temperatura_Abrigo_150cm_Minima = tempAbrigo150Min,
Evapotranspiracion_Potencial = evapotransPotencial,
Precipitacion_Pluviometrica = precDiaPlub,
Humedad_Media_8_14_20 = HMedia81420,
Rocio_Medio = rocioMedio,
Velocidad_Viento_1000cm_Media = velViento1000Media,
Radiacion_Global = radiacionGlobal,
Radiacion_Neta = radiacionNeta,
)
datos_EMC <- balcarce_EMC
datos_EMC <- datos_EMC %>%
filter(Año >= 1970)
# datos_EMC <- subset(datos, select = -c(Direccion_Viento_200cm, Direccion_Viento_1000cm))
datos_EMC$Fecha <- as.Date(datos_EMC$Fecha, format = "%Y-%m-%d")
datos_EMC <- datos_EMC[order(datos_EMC$Fecha, decreasing = TRUE), ]
datos_EMC <- datos_EMC %>%
rows_insert(datos_siga_clean, by = "Fecha")
datos_EMC <- datos_EMC %>%
rows_insert(datos_siga_clean, by = "Fecha", conflict = "ignore")
datos_actuales <- datos_EMC[!is.na(datos_EMC$Precipitacion_Pluviometrica) &
!is.na(datos_EMC$Temperatura_Abrigo_150cm_Maxima) &
!is.na(datos_EMC$Temperatura_Abrigo_150cm_Minima), ]
ultima_fecha <- max(datos_actuales$Fecha)
ultimos_datos <- datos_actuales[datos_actuales$Fecha == ultima_fecha, ]
lluvia_ultimo_dia <- ultimos_datos$Precipitacion_Pluviometrica
Tmax_ultimo_dia <- ultimos_datos$Temperatura_Abrigo_150cm_Maxima
Tmin_ultimo_dia <- ultimos_datos$Temperatura_Abrigo_150cm_Minima
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::forgetDeployment(appPath = "I:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo")
# renv::snapshot()
renv::init()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
rsconnect::forgetDeployment(appPath = "I:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo")
rsconnect::forgetDeployment(appPath = "I:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo")
# renv::snapshot()
renv::init()
install.packages("Matrix")
renv::snapshot()
citation()
shiny::runApp()
shiny::runApp()
rsconnect::forgetDeployment(appPath = "I:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo")
# renv::snapshot()
renv::init()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('E:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar')
install.packages("bsicons")
runApp('E:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar')
runApp('E:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar')
shiny::runApp()
runApp('E:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar')
shiny::runApp()
# renv::snapshot()
renv::init()
shiny::runApp()
shiny::runApp()
# renv::snapshot()
renv::init()
shiny::runApp()
install.packages("googlesheets4")
library(googlesheets4)
runApp()
shiny::runApp()
# renv::snapshot()
renv::init()
# renv::snapshot()
renv::init()
renv::snapshot()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
renv::snapshot()
# renv::snapshot()
renv::init()
shiny::runApp()
shiny::runApp()
# renv::snapshot()
renv::init()
renv::snapshot()
