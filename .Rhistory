br(),
tags$p(
"Podes seguirnos en las Redes sociales",
br(),
tags$a(
icon("instagram"), "Instagram", href= "https://www.instagram.com/agromet_inta.balcarce/#"),
br(),
tags$a(
icon("twitter"), "Twitter", href= "https://twitter.com/agrometbalcarce"),
br(),
tags$p(
"Para comunicarse con el grupo ",
tags$h7(
strong("Dra. Nuria Lewczuk : lewczuk.nuria@inta.gob.ar")),
tags$h7(
strong("Dra. Laura Echarte : echarte.laura@inta.gob.ar"))
))
),
body = dashboardBody(
tags$head(
tags$style(HTML("
.small-box {height: 80px;
text-align:center;
display: flex;
flex-direction: column;
justify-content: center;
}
"))
),
tabsetPanel(
tabPanel(
"Gráficos",
fluidRow(
infoBoxOutput(width = 2, "value5"),
infoBoxOutput(width = 2, "value1"),
infoBoxOutput(width = 2, "value2"),
infoBoxOutput(width = 2, "value3"),
infoBoxOutput(width = 2, "value4")
),
br(),
fluidRow(
infoBoxOutput(width = 4, "precipitation_info_box"),
infoBoxOutput(width = 4, "tempMax_info_box"),
infoBoxOutput(width = 4, "tempMin_info_box")
),
br(),
fluidRow(
box(
title = "Precipitaciones diarias (mm)"
,status = "gray"
,solidHeader = TRUE
,collapsible = TRUE
,plotlyOutput("grafico_lluvia", height = "300px")
),
box(
title = "Precipitaciones y ETo mensuales (mm)"
,status = "gray"
,solidHeader = TRUE
,collapsible = TRUE
,plotlyOutput("grafico_lluvia_etp_acum", height = "300px")
),
box(
title = "Temperaturas diarias (ºC)"
,status = "gray"
,solidHeader = TRUE
,collapsible = TRUE
,plotlyOutput("grafico_temperatura", height = "300px")
),
box(
title = "Número de días con heladas"
,status = "gray"
,solidHeader = TRUE
,collapsible = TRUE
,plotlyOutput("grafico_heladas", height = "300px")
)
)
),
tabPanel(
"Datos disponibles",
dataTableOutput("datos"),
br(),
"Selecciona el periodo:",
fluidRow(
column(2,
dateInput("fecha_inicio", "Fecha de Inicio", value = NULL, format = "dd/mm/yyyy")),
column(2,
dateInput("fecha_fin", "Fecha de Fin", value = NULL, format = "dd/mm/yyyy"))
),
selectInput(
"variables",
"Seleccionar Variables:",
choices = c("Fecha", "Temperatura_Abrigo_150cm",
"Temperatura_Abrigo_150cm_Maxima", "Temperatura_Abrigo_150cm_Minima",
"Temperatura_Intemperie_5cm_Minima", "Temperatura_Intemperie_50cm_Minima",
"Temperatura_Suelo_5cm_Media", "Temperatura_Suelo_10cm_Media",
"Temperatura_Inte_5cm", "Temperatura_Intemperie_150cm_Minima",
"Humedad_Suelo", "Precipitacion_Pluviometrica", "Granizo",
"Nieve", "Heliofania_Efectiva", "Heliofania_Relativa", "Tesion_Vapor_Media",
"Humedad_Media", "Humedad_Media_8_14_20", "Rocio_Medio",
"Duracion_Follaje_Mojado", "Velocidad_Viento_200cm_Media",
"Direccion_Viento_200cm", "Velocidad_Viento_1000cm_Media",
"Direccion_Viento_1000cm", "Velocidad_Viento_Maxima", "Presion_Media",
"Radiacion_Global", "Radiacion_Neta", "Evaporacion_Tanque",
"Evapotranspiracion_Potencial", "Profundidad_Napa", "Horas_Frio",
"Unidad_Frio"
),
selected = "Fecha",
multiple = TRUE
),
downloadButton("Datos_meteo_Balcarce", "Descargar .csv")
),
tabPanel(
"Información",
br(),
br(),
tags$p(
"Si utilizas algunos de estos datos por favor menciona el origen de los mismos:",
br(),
tags$h5(
strong("Estación Agrometeorológica Convencional INTA Balcarce")
)
),
dashboardFooter(
tags$div(
class = "d-flex justify-content-center align-items-center",
tags$img(src = "Logo_INTA_Balcarce.png",
height = "50px",
width = "auto")
)
)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
library(rsconnect)
library(sendmailR)
library(readxl)
library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(shinycssloaders)
library(DT)
library(ggplot2)
library(plotly)
library(dplyr)
library(bslib)
library(shinythemes)
library(bs4Dash)
library(lubridate)
library(png)
library(readxl)
runApp()
balcarce_hist_mensuales <- balcarce_hist_mensuales %>%
mutate(Mes = factor(Mes, levels = c("enero", "febrero", "marzo", "abril", "mayo", "junio",
"julio", "agosto", "septiembre", "octubre", "noviembre",
"diciembre")))
balcarce_hist_mensuales <- read_excel("E:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo/balcarce_EMC.xlsx",
sheet = "Medias Mensuales Históricas")
balcarce_hist_mensuales
balcarce_hist_mensuales <- balcarce_hist_mensuales %>%
mutate(Mes = factor(Mes, levels = c("enero", "febrero", "marzo", "abril", "mayo", "junio",
"julio", "agosto", "septiembre", "octubre", "noviembre",
"diciembre")))
ggplot(balcarce_hist_mensuales, aes(x = Mes)) +
geom_line(aes(y = Temperatura_Maxima_MediaHistórica, color = "Temperatura Máxima"), size = 1.2) +
geom_line(aes(y = Temperatura_Minima_MediaHistórica, color = "Temperatura Mínima"), size = 1.2) +
geom_bar(aes(y = Precipitacion_Pluviometrica_MediaHistórica, fill = "Precipitación"),
stat = "identity", position = "dodge", alpha = 0.7) +
geom_bar(aes(y = Evapotranspiración_Potencial_Mediahistórica, fill = "Evapotranspiración"),
stat = "identity", position = "dodge", alpha = 0.4) +
scale_y_continuous(
name = "Temperatura (°C)",
sec.axis = sec_axis(~., name = "Precipitación y Evapotranspiración (mm)")
) +
labs(
x = "Mes",
title = ""
) +
scale_color_manual(values = c("Temperatura Máxima" = "red", "Temperatura Mínima" = "yellow")) +
scale_fill_manual(values = c("Precipitación" = "skyblue", "Evapotranspiración" = "orange")) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top"
)
shiny::runApp()
runApp()
runApp()
lluvia_historica <- datos_historicos %>%
group_by(Año, Mes) %>%
summarise(Lluvia_Mensual = sum(Precipitacion_Pluviometrica, na.rm = TRUE)) %>%
ungroup()
datos <- balcarce_EMC
datos <- subset(datos, select = -c(Direccion_Viento_200cm, Direccion_Viento_1000cm))
datos$Fecha <- as.Date(datos$Fecha, format = "%Y-%m-%d")
datos <- datos[order(datos$Fecha, decreasing = TRUE), ]
datos
ultima_fecha <- max(datos$Fecha)
ultimos_datos <- datos[datos$Fecha == ultima_fecha, ]
lluvia_ultimo_dia <- ultimos_datos$Precipitacion_Pluviometrica
Tmax_ultimo_dia <- ultimos_datos$Temperatura_Abrigo_150cm_Maxima
Tmin_ultimo_dia <- ultimos_datos$Temperatura_Abrigo_150cm_Minima
datos_historicos <- datos %>%
filter(Año >= 1991 & Año <= 2020)
lluvia_historica <- datos_historicos %>%
group_by(Año, Mes) %>%
summarise(Lluvia_Mensual = sum(Precipitacion_Pluviometrica, na.rm = TRUE)) %>%
ungroup()
lluvia_historica
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lluvia_historica <- datos_historicos %>%
group_by(Año, Mes) %>%
summarise(Lluvia_Mensual = sum(Precipitacion_Pluviometrica, na.rm = TRUE)) %>%
ungroup()
lluvia_historica
lluvia_mensual <- reactive({
datasetInput() %>%
group_by(Año, Mes) %>%
summarise(Lluvia_Mensual = sum(Precipitacion_Pluviometrica, na.rm = TRUE)) %>%
ungroup()
})
lluvia_mensual
library(readxl)
mensuales_historicos <- read_excel("balcarce_EMC.xlsx",
sheet = "Medias Mensuales Históricas")
View(mensuales_historicos)
mensuales_historicos
lluvia_combined <- reactive({
etiqueta_anio_seleccionado <- paste("Año", input$ano_selector)
# Combina los datos históricos y del año seleccionado
datos_combinados <- bind_rows(
lluvia_historica %>%
select(Mes, Lluvia_Mensual = Precipitacion_Pluviometrica_MediaHistórica) %>%
mutate(Periodo = "Histórico (1991-2020)"),
lluvia_mensual() %>%
mutate(Periodo = etiqueta_anio_seleccionado)
)
# Ordena los meses correctamente
datos_combinados$Mes <- factor(datos_combinados$Mes,
levels = c("enero", "febrero", "marzo", "abril", "mayo", "junio",
"julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"),
ordered = TRUE)
return(datos_combinados)
})
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
datos_historicos
historical_precipitation
historical_precipitation <- datos_historicos %>%
mutate(Mes = month(Fecha, label = TRUE)) %>%
group_by(Mes) %>%
summarise(Precipitacion_Historica = mean(Precipitacion_Pluviometrica, na.rm = TRUE)) %>%
ungroup()
historical_precipitation
historical_precipitation <- datos_historicos %>%
mutate(Mes = month(Fecha, label = TRUE)) %>%
group_by(Mes) %>%
summarise(Precipitacion_Historica = sum(Precipitacion_Pluviometrica, na.rm = TRUE)) %>%
ungroup()
historical_precipitation
historical_precipitation <- datos_historicos %>%
mutate(Mes = month(Fecha, label = TRUE)) %>%
group_by(Año, Mes) %>%
summarise(Precipitacion_Historica = sum(Precipitacion_Pluviometrica, na.rm = TRUE)) %>%
ungroup()
historical_precipitation
historical_precipitation <- datos_historicos %>%
mutate(Mes = month(Fecha, label = TRUE)) %>%
group_by(Año, Mes) %>%
summarise(Precipitacion_Historica = sum(Precipitacion_Pluviometrica, na.rm = TRUE)) %>%
ungroup()
historical_precipitation_mensual <- historical_precipitation %>%
group_by(Mes) %>%
summarise(Precipitacion_Promedio_Mensual = mean(Precipitacion_Historica, na.rm = TRUE)) %>%
ungroup()
historical_precipitation_mensual
dataset_acumulado <- datasetInput() %>%
mutate(Mes = month(Fecha, label = TRUE)) %>%
group_by(Mes) %>%
summarise(Precipitacion_Acumulada = sum(Precipitacion_Pluviometrica, na.rm = TRUE)) %>%
ungroup()
historical_precipitation <- datos_historicos %>%
mutate(Mes = month(Fecha, label = TRUE)) %>%
group_by(Año, Mes) %>%
summarise(Precipitacion_Historica = sum(Precipitacion_Pluviometrica, na.rm = TRUE)) %>%
ungroup()
historical_precipitation_mensual <- historical_precipitation %>%
group_by(Mes) %>%
summarise(Precipitacion_Promedio_Mensual = mean(Precipitacion_Historica, na.rm = TRUE)) %>%
ungroup()
dataset_completo <- dataset_acumulado %>%
left_join(historical_precipitation_mensual, by = "Mes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(tidyr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
historical_temperaturas <- datos_historicos %>%
mutate(Mes = month(Fecha, label = TRUE)) %>%
group_by(Año, Mes) %>%
summarise(Temp_max_Historica = mean(Temperatura_Abrigo_150cm_Maxima, na.rm = TRUE),
Temp_min_Historica = mean(Temperatura_Abrigo_150cm_Minima, na.rm = TRUE)) %>%
ungroup()
historical_temperaturas
historical_temperaturas <- datos_historicos %>%
mutate(Mes = month(Fecha, label = TRUE)) %>%
group_by(Año, Mes) %>%
summarise(Temp_max_Historica = mean(Temperatura_Abrigo_150cm_Maxima, na.rm = TRUE),
Temp_min_Historica = mean(Temperatura_Abrigo_150cm_Minima, na.rm = TRUE)) %>%
ungroup()
historical_temperaturas
historical_temperaturas <- datos_historicos %>%
mutate(Mes = month(Fecha, label = TRUE)) %>%
group_by(Mes) %>%
summarise(Temp_max_Historica = mean(Temperatura_Abrigo_150cm_Maxima, na.rm = TRUE),
Temp_min_Historica = mean(Temperatura_Abrigo_150cm_Minima, na.rm = TRUE)) %>%
ungroup()
historical_temperaturas
runApp()
runApp()
runApp()
temperaturas_completo <- temperaturas_mensuales %>%
left_join(historical_temperaturas, by = "Mes")
#
temperaturas_mensuales <- datasetInput() %>%
mutate(Mes = month(Fecha, label = TRUE)) %>%
group_by(Mes) %>%
summarise(Temperatura_Maxima = mean(Temperatura_Abrigo_150cm_Maxima, na.rm = TRUE),
Temperatura_Minima = mean(Temperatura_Abrigo_150cm_Minima, na.rm = TRUE)) %>%
ungroup()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dataset_completo_temperatura <- temperaturas_mensuales %>%
left_join(historico_temperaturas_mensual, by = "Mes")
runApp()
runApp()
runApp()
historico_temperaturas <- datos_historicos %>%
mutate(Mes = month(Fecha, label = TRUE)) %>%
group_by(Año, Mes) %>%
summarise(Temp_Max_Historica = round(mean(Temperatura_Abrigo_150cm_Maxima, na.rm = TRUE), 1),
Temp_Min_Historica = round(mean(Temperatura_Abrigo_150cm_Minima, na.rm = TRUE), 1)) %>%
ungroup()
historico_temperaturas
datos_historicos
historico_temperaturas_Mes <- datos_historicos %>%
mutate(Mes = month(Fecha, label = TRUE)) %>%
group_by(Mes) %>%
summarise(Temp_Max_Historica = round(mean(Temperatura_Abrigo_150cm_Maxima, na.rm = TRUE), 1),
Temp_Min_Historica = round(mean(Temperatura_Abrigo_150cm_Minima, na.rm = TRUE), 1)) %>%
ungroup()
historico_temperaturas_Mes
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#
anio_seleccionado_label <- paste("Año", input$ano_selector)
anio_seleccionado_label
#
anio_seleccionado_label <- input$ano_selector
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
library(sendmailR)
library(readxl)
library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(shinycssloaders)
library(DT)
library(tidyr)
library(ggplot2)
library(plotly)
library(dplyr)
library(bslib)
library(shinythemes)
library(bs4Dash)
library(lubridate)
library(png)
library(readxl)
balcarce_EMC <- read_excel("balcarce_EMC.xlsx",
col_types = c("date", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"text", "numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
runApp()
runApp()
