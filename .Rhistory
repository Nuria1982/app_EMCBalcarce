)
})
output$value3 <- renderInfoBox({
infoBox(
title = div(p("Temperatura Máxima",
style = "text-align: center;font-size: 18px;"),
style = "margin-bottom: 10px;"),
value = div(round(Tmax_ultimo_dia, 1),
style = "text-align: center; font-size: 24px;"),
icon = icon("sun"),
color = "danger",
fill = TRUE
)
})
output$value4 <- renderInfoBox({
infoBox(
title = div(p("Temperatura Mínima",
style = "text-align: center;font-size: 18px;"),
style = "margin-bottom: 10px;"),
value = div(round(Tmin_ultimo_dia, 1),
style = "text-align: center; font-size: 24px;"),
icon = icon("snowflake"),
color = "warning",
fill = TRUE
)
})
output$precipitation_info_box <- renderInfoBox({
infoBox(
title = "Precipitaciones Acumuladas",
value = paste("Acumulado Año ", current_year, ": ", round(pp_acum, 0), "mm"),
subtitle = paste("Promedio Histórico anual (1991-2020): ", round(promedio_historico, 0), "mm"),
icon = icon("tint"),
color = "info"
)
})
output$tempMax_info_box <- renderInfoBox({
infoBox(
title = "Temperaturas Máximas",
value = paste("Promedio Año ", current_year, ": ", round(ttmax_anual, 0), "ºC"),
subtitle = paste("Promedio Histórico anual (1991-2020): ", round(promedio_historico_ttmax, 0), "ºC"),
icon = icon("sun"),
color = "danger"
)
})
output$tempMin_info_box <- renderInfoBox({
infoBox(
title = "Temperaturas Mínimas",
value = paste("Promedio Año ", current_year, ": ", round(ttmin_anual, 0),"ºC"),
subtitle = paste("Promedio Histórico anual (1991-2020): ", round(promedio_historico_ttmin, 0), "ºC"),
icon = icon("snowflake"),
color = "warning"
)
})
output$grafico_lluvia <- renderPlotly({
gg <- ggplot(datasetInput(), aes(x = Fecha)) +
geom_bar(aes(y = Precipitacion_Pluviometrica), stat = "identity", fill = "#003459", alpha = 0.8) +
labs(x = "", y = "mm") +
ggtitle("") +
theme_minimal() +
theme(
panel.grid.major = element_blank(),  # Elimina las líneas de la grilla
panel.grid.minor = element_blank(),  # Elimina las líneas de la grilla
axis.ticks = element_blank(),         # Elimina los ticks del eje
axis.line = element_line(color = "black"))
ggplotly(gg)
})
output$grafico_lluvia_etp_acum <- renderPlotly({
dataset_acumulado <- datasetInput() %>%
mutate(Mes = month(Fecha, label = TRUE)) %>%
group_by(Mes) %>%
summarise(Precipitacion_Acumulada = sum(Precipitacion_Pluviometrica, na.rm = TRUE),
Evapotranspiracion_Acumulada = round(sum(Evapotranspiracion_Potencial, na.rm = TRUE)), 2)
# Crear el gráfico de barras superpuestas
acum <- ggplot(dataset_acumulado, aes(x = Mes)) +
geom_bar(aes(y = Precipitacion_Acumulada), stat = "identity", fill = "#007EA7", color = "#003459",alpha = 0.5) +
geom_bar(aes(y = Evapotranspiracion_Acumulada), stat = "identity", fill = "#BF4342", color = "#8C1C13", alpha = 0.5) +
scale_fill_manual(values = c("Precipitaciones acumuladas" = "#007EA7", "Evapotranspiracion Potencial" = "#BF4342"), name = "") +
labs(x = "", y = "Valor acumulado mensual (mm)", fill = "") +
ggtitle("") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),
panel.grid.major = element_blank(),  # Elimina las líneas de la grilla
panel.grid.minor = element_blank(),  # Elimina las líneas de la grilla
axis.ticks = element_blank(),         # Elimina los ticks del eje
axis.line = element_line(color = "black"))
ggplotly(acum) %>%
layout(legend = list(orientation = "h", x = 0.1, y = 1.2))
})
output$grafico_temperatura <- renderPlotly({
tt <- ggplot(datasetInput(), aes(x = Fecha)) +
geom_line(aes(y = Temperatura_Abrigo_150cm, color = "Temperatura Media"), na.rm = TRUE, show.legend = FALSE) +
geom_line(aes(y = Temperatura_Abrigo_150cm_Maxima, color = "Temperatura Máxima"), na.rm = TRUE, show.legend = FALSE) +
geom_line(aes(y = Temperatura_Abrigo_150cm_Minima, color = "Temperatura Mínima"), na.rm = TRUE, show.legend = FALSE) +
labs(title = "",
x = "",
y = "°C") +
scale_color_manual(values = c("Temperatura Media" = "#136F63",
"Temperatura Máxima" = "#D00000",
"Temperatura Mínima" = "#FFBA08")) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),  # Elimina las líneas de la grilla
panel.grid.minor = element_blank(),  # Elimina las líneas de la grilla
axis.ticks = element_blank(),         # Elimina los ticks del eje
axis.line = element_line(color = "black"))
ggplotly(tt) %>%
layout(legend = list(orientation = "h", x = 0.1, y = 1.2))
})
output$grafico_heladas <- renderPlotly({
promedio_heladas <- datasetInput() %>%
filter(Temperatura_Abrigo_150cm_Minima < 3) %>%
group_by(Mes) %>%
summarise(Dias_Temperatura_Minima_Menor_3C = n()) %>%
mutate(Mes = factor(substr(Mes, 1, 3), levels = c("ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"),
ordered = TRUE)) # Aquí se establecen los niveles ordenados
hh <- ggplot(promedio_heladas, aes(x = Mes, y = Dias_Temperatura_Minima_Menor_3C)) +
geom_bar(stat = "identity", fill = "#FFBA08", color = "#FF9F1C") +
labs(title = "",
x = "",
y = "Número de días con\nTemperatura mínimas < 3ºC") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),
panel.grid.major = element_blank(),  # Elimina las líneas de la grilla
panel.grid.minor = element_blank(),  # Elimina las líneas de la grilla
axis.ticks = element_blank(),         # Elimina los ticks del eje
axis.line = element_line(color = "black"))
ggplotly(hh) %>%
layout(legend = list(orientation = "h", x = 0.1, y = 1.2))
})
output$datos <- renderDT (
datos,
rownames = FALSE,
options = list(
lengthchange = TRUE,
scrollX = TRUE,
scrollY = "400px",
scrollCollapse = TRUE
)
)
output$Datos_meteo_Balcarce <- downloadHandler(
filename = function() {
"datos_meteo_balcarce.csv"
},
content = function(file) {
# Filtra los datos según las variables seleccionadas
datos_filtrados3 <- datos[, input$variables, drop = FALSE]
write.csv(datos_filtrados3, file, row.names = FALSE)
}
)
observeEvent(input$enviar, {
comentario <- input$text
if (comentario != "Aquí...") {
enviar_correo(comentario)
showNotification("Mensaje enviado", duration = 5)
}
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
datos <- read.csv("balcarce_EMC.csv")
datos <- read.csv2("balcarce_EMC.csv")
datos <- read.table("balcarce_EMC.csv")
datos
View(datos)
datos <- read.table("balcarce_EMC.csv", header = TRUE, sep = ",", fill = TRUE)
datos <- read.table("balcarce_EMC.csv", header = TRUE, sep = ";", fill = TRUE)
datos <- read.table("balcarce_EMC.csv", header = TRUE, sep = "", fill = TRUE)
datos <- read.table("balcarce_EMC.csv", header = TRUE, sep = ",", fill = TRUE)
datos <- read.table("balcarce_EMC.csv", header = TRUE, sep = ";", fill = TRUE)
datos <- read.table("balcarce_EMC.csv", sep = ";", header = FALSE, stringsAsFactors = FALSE)
View(datos)
datos <- read.table("balcarce_EMC.csv", sep = ";", header = TRUE, stringsAsFactors = FALSE)
datos <- read.table("balcarce_EMC.csv", sep = ";", stringsAsFactors = FALSE)
View(datos)
balcarce_EMC <- "E:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo/balcarce_EMC.xlsx"
balcarce_EMC <- "E:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo/balcarce_EMC.xlsx"
balcarce_EMC <- read_excel("balcarce_EMC.xlsx",
col_types = c("date", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"text", "numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
library(readxl)
balcarce_EMC <- read_excel("balcarce_EMC.xlsx",
col_types = c("date", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"text", "numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
datos <- balcarce_EMC
datos <- subset(datos, select = -c(Direccion_Viento_200cm, Direccion_Viento_1000cm))
datos$Fecha <- as.Date(datos$Fecha, format = "%Y-%m-%d")
datos <- datos[order(datos$Fecha, decreasing = TRUE), ]
datos
ultima_fecha <- max(datos$Fecha)
ultimos_datos <- datos[datos$Fecha == ultima_fecha, ]
lluvia_ultimo_dia <- ultimos_datos$Precipitacion_Pluviometrica
Tmax_ultimo_dia <- ultimos_datos$Temperatura_Abrigo_150cm_Maxima
Tmin_ultimo_dia <- ultimos_datos$Temperatura_Abrigo_150cm_Minima
shiny::runApp()
balcarce_EMC <- read_excel("balcarce_EMC.xlsx",
col_types = c("date", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"text", "numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
datos <- balcarce_EMC
balcarce_EMC <- read_excel("balcarce_EMC.xlsx",
col_types = c("date", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"text", "numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
library(rsconnect)
library(sendmailR)
library(readxl)
library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(shinycssloaders)
library(DT)
library(ggplot2)
library(plotly)
library(dplyr)
library(bslib)
library(shinythemes)
library(bs4Dash)
library(lubridate)
library(png)
library(readxl)
balcarce_EMC <- read_excel("balcarce_EMC.xlsx",
col_types = c("date", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"text", "numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
balcarce_EMC
View(balcarce_EMC)
balcarce_resumen <- balcarce_EMC %>%
group_by(Año, Mes) %>%
summarise_at(vars(-Precipitacion_Pluviometrica, -Evapotranspiracion), mean) %>%
summarise(Precipitacion_Pluviometrica = sum(Precipitacion_Pluviometrica), Evapotranspiracion = sum(Evapotranspiracion))
balcarce_resumen <- balcarce_EMC %>%
group_by(Año, Mes) %>%
summarise_at(vars(-Precipitacion_Pluviometrica, -Evapotranspiracion_Potencial), mean) %>%
summarise(Precipitacion_Pluviometrica = sum(Precipitacion_Pluviometrica), Evapotranspiracion_Potencial = sum(Evapotranspiracion_Potencial))
balcarce_resumen <- balcarce_EMC %>%
group_by(Año, Mes) %>%
summarise_at(vars(-Precipitacion_Pluviometrica, -Evapotranspiracion_Potencial), mean) %>%
summarise(Precipitacion_Pluviometrica = sum(Precipitacion_Pluviometrica), Evapotranspiracion_Potencial = sum(Evapotranspiracion_Potencial))
balcarce_EMC_filtrado <- balcarce_EMC %>%
filter(Año >= 1970)
balcarce_EMC_1970 <- balcarce_EMC %>%
filter(Año >= 1970)
balcarce_resumen <- balcarce_EMC_1970 %>%
group_by(Año, Mes) %>%
summarise_at(vars(-Precipitacion_Pluviometrica, -Evapotranspiracion_Potencial), mean) %>%
summarise(Precipitacion_Pluviometrica = sum(Precipitacion_Pluviometrica), Evapotranspiracion_Potencial = sum(Evapotranspiracion_Potencial))
balcarce_EMC_1970
View(balcarce_EMC_1970)
rlang::last_trace()
balcarce_resumen <- balcarce_EMC_1970 %>%
group_by(Año, Mes) %>%
summarise(across(!c(Precipitacion_Pluviometrica, Evapotranspiracion_Potencial), mean),
Precipitacion_Pluviometrica = sum(Precipitacion_Pluviometrica),
Evapotranspiracion_Potencial = sum(Evapotranspiracion_Potencial))
# Mostrar la tabla resultante
print(balcarce_resumen)
# Mostrar la tabla resultante
View(balcarce_resumen)
ruta_excel <- "E:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo/balcarce_EMC.xlsx"
# Leer la Hoja6 del archivo Excel
balcarce_resumen <- read_excel(ruta_excel, sheet = "Hoja6")
View(balcarce_resumen)
ruta_excel <- "E:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo/balcarce_EMC.xlsx"
# Leer la Hoja6 del archivo Excel
balcarce_resumen <- read_excel(ruta_excel, sheet = "Hoja6")
View(balcarce_resumen)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Define UI ----
ui <- dashboardPage(
header = dashboardHeader(
title = div(
style = "font-size: 24px; font-weight: bold; text-align: center;",
"EMC Balcarce",
tags$style(HTML('.navbar { background-color: #2596be; }'))
)
),
sidebar = dashboardSidebar(
width = 400,
selectInput(
inputId = "ano_selector",
label = "Selecciona el Año:",
choices = c("Todos los años", unique(datos$Año)),
selected = "Todos los años"
),
checkboxGroupInput("mes_selector", "Selecciona los meses:",
choices = c("Mostrar todos los meses",
"enero", "febrero", "marzo", "abril",
"mayo", "junio", "julio", "agosto",
"septiembre", "octubre", "noviembre", "diciembre"),
selected = "Mostrar todos los meses"),
br(),
br(),
tags$p(
"Podes seguirnos en las Redes sociales",
br(),
tags$a(
icon("instagram"), "Instagram", href= "https://www.instagram.com/agromet_inta.balcarce/#"),
br(),
tags$a(
icon("twitter"), "Twitter", href= "https://twitter.com/agrometbalcarce"),
br(),
tags$p(
"Para comunicarse con el grupo ",
tags$h7(
strong("Dra. Nuria Lewczuk : lewczuk.nuria@inta.gob.ar")),
tags$h7(
strong("Dra. Laura Echarte : echarte.laura@inta.gob.ar"))
))
),
body = dashboardBody(
tags$head(
tags$style(HTML("
.small-box {height: 80px;
text-align:center;
display: flex;
flex-direction: column;
justify-content: center;
}
"))
),
tabsetPanel(
tabPanel(
"Gráficos",
fluidRow(
infoBoxOutput(width = 2, "value5"),
infoBoxOutput(width = 2, "value1"),
infoBoxOutput(width = 2, "value2"),
infoBoxOutput(width = 2, "value3"),
infoBoxOutput(width = 2, "value4")
),
br(),
fluidRow(
infoBoxOutput(width = 4, "precipitation_info_box"),
infoBoxOutput(width = 4, "tempMax_info_box"),
infoBoxOutput(width = 4, "tempMin_info_box")
),
br(),
fluidRow(
box(
title = "Precipitaciones diarias (mm)"
,status = "gray"
,solidHeader = TRUE
,collapsible = TRUE
,plotlyOutput("grafico_lluvia", height = "300px")
),
box(
title = "Precipitaciones y ETo mensuales (mm)"
,status = "gray"
,solidHeader = TRUE
,collapsible = TRUE
,plotlyOutput("grafico_lluvia_etp_acum", height = "300px")
),
box(
title = "Temperaturas diarias (ºC)"
,status = "gray"
,solidHeader = TRUE
,collapsible = TRUE
,plotlyOutput("grafico_temperatura", height = "300px")
),
box(
title = "Número de días con heladas"
,status = "gray"
,solidHeader = TRUE
,collapsible = TRUE
,plotlyOutput("grafico_heladas", height = "300px")
)
)
),
tabPanel(
"Datos disponibles",
dataTableOutput("datos"),
br(),
"Selecciona el periodo:",
fluidRow(
column(2,
dateInput("fecha_inicio", "Fecha de Inicio", value = NULL, format = "dd/mm/yyyy")),
column(2,
dateInput("fecha_fin", "Fecha de Fin", value = NULL, format = "dd/mm/yyyy"))
),
selectInput(
"variables",
"Seleccionar Variables:",
choices = c("Fecha", "Temperatura_Abrigo_150cm",
"Temperatura_Abrigo_150cm_Maxima", "Temperatura_Abrigo_150cm_Minima",
"Temperatura_Intemperie_5cm_Minima", "Temperatura_Intemperie_50cm_Minima",
"Temperatura_Suelo_5cm_Media", "Temperatura_Suelo_10cm_Media",
"Temperatura_Inte_5cm", "Temperatura_Intemperie_150cm_Minima",
"Humedad_Suelo", "Precipitacion_Pluviometrica", "Granizo",
"Nieve", "Heliofania_Efectiva", "Heliofania_Relativa", "Tesion_Vapor_Media",
"Humedad_Media", "Humedad_Media_8_14_20", "Rocio_Medio",
"Duracion_Follaje_Mojado", "Velocidad_Viento_200cm_Media",
"Direccion_Viento_200cm", "Velocidad_Viento_1000cm_Media",
"Direccion_Viento_1000cm", "Velocidad_Viento_Maxima", "Presion_Media",
"Radiacion_Global", "Radiacion_Neta", "Evaporacion_Tanque",
"Evapotranspiracion_Potencial", "Profundidad_Napa", "Horas_Frio",
"Unidad_Frio"
),
selected = "Fecha",
multiple = TRUE
),
downloadButton("Datos_meteo_Balcarce", "Descargar .csv")
),
tabPanel(
"Información",
br(),
br(),
tags$p(
"Si utilizas algunos de estos datos por favor menciona el origen de los mismos:",
br(),
tags$h5(
strong("Estación Agrometeorológica Convencional INTA Balcarce")
)
),
dashboardFooter(
tags$div(
class = "d-flex justify-content-center align-items-center",
tags$img(src = "Logo_INTA_Balcarce.png",
height = "50px",
width = "auto")
)
)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
